/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package slither;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;

class SnakeTest {
    private Snake snake;
    private int maxX = 10;
    private int maxY = 10;
    private int seed = 10;

    @BeforeEach
    void setUp() {
        snake = new Snake(2, 2, maxX, maxY, seed);
    }
    @Test
    void testSeededConstructor() {
        Snake snake2 = new Snake(2, 2, maxX, maxY, seed);

        assertEquals(snake.applePosition(), snake2.applePosition());
    }

    @Test
    void testOutOfBoundsLeft() {
        // cannot move left right away because default direction is right
        snake.setDirection(Direction.UP);
        snake.move();
        assertFalse(snake.outOfBounds());

        // exactly 3 moves will make snake go out of screen left
        snake.setDirection(Direction.LEFT);
        snake.move();
        assertFalse(snake.outOfBounds());
        snake.move();
        assertFalse(snake.outOfBounds());

        snake.move();
        assertTrue(snake.outOfBounds());
    }

    @Test
    void testOutOfBoundsRight() {
        // exactly 8 moves will make snake go out of screen right
        for (int i = 0; i < 7; i++) {
            snake.move();
            assertFalse(snake.outOfBounds());
        }

        snake.move();
        assertTrue(snake.outOfBounds());
    }

    @Test
    void testOutOfBoundsUp() {
        // exactly 3 moves will make snake go out of screen up
        snake.setDirection(Direction.UP);
        snake.move();
        assertFalse(snake.outOfBounds());
        snake.move();
        assertFalse(snake.outOfBounds());

        snake.move();
        assertTrue(snake.outOfBounds());
    }

    @Test
    void testOutOfBoundsDown() {
        // exactly 8 moves will make snake go out of screen down
        snake.setDirection(Direction.DOWN);
        for (int i = 0; i < 7; i++) {
            snake.move();
            assertFalse(snake.outOfBounds());
        }

        snake.move();
        assertTrue(snake.outOfBounds());
    }

    private void moveSnake(Snake snake, Point p) {
        int horizontal = p.getX() - snake.getHeadPosition().getX();
        while (snake.getHeadPosition().getX() != p.getX()) {
            snake.setDirection(horizontal < 0 ? Direction.LEFT : Direction.RIGHT);
            snake.move();
        }

        int vertical = p.getY() - snake.getHeadPosition().getY();
        while (snake.getHeadPosition().getY() != p.getY()) {
            snake.setDirection(vertical < 0 ? Direction.UP : Direction.DOWN);
            snake.move();
        }
    }

    @Test
    void testAppleEat() {
        // starts with no body
        assertTrue(snake.getBody().isEmpty());

        // go to apple manually
        Point apple = snake.applePosition();
        moveSnake(snake, apple);

        assertTrue(snake.ateOnLastStep());
        Point newApple = snake.applePosition();
        assertNotEquals(newApple, apple);
        assertEquals(1, snake.getBody().size());
    }
}
